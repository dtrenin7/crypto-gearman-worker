/////////////////////////////// atob
 var _PADCHAR = "=",
  _ALPHA = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

var _getbyte64 = function( s, i ) {
  var idx = _ALPHA.indexOf( s.charAt( i ) );

  if ( idx === -1 ) {
    throw "Cannot decode base64";
  }

  return idx;
}

var atob = function( s ) {
  var pads = 0,
    i,
    b10,
    imax = s.length,
    x = [];

  s = String( s );

  if ( imax === 0 ) {
    return s;
  }

  if ( imax % 4 !== 0 ) {
    throw "Cannot decode base64";
  }

  if ( s.charAt( imax - 1 ) === _PADCHAR ) {
    pads = 1;

    if ( s.charAt( imax - 2 ) === _PADCHAR ) {
      pads = 2;
    }

    // either way, we want to ignore this last block
    imax -= 4;
  }

  for ( i = 0; i < imax; i += 4 ) {
    b10 = ( _getbyte64( s, i ) << 18 ) | ( _getbyte64( s, i + 1 ) << 12 ) | ( _getbyte64( s, i + 2 ) << 6 ) | _getbyte64( s, i + 3 );
    x.push( String.fromCharCode( b10 >> 16, ( b10 >> 8 ) & 0xff, b10 & 0xff ) );
  }

  switch ( pads ) {
    case 1:
      b10 = ( _getbyte64( s, i ) << 18 ) | ( _getbyte64( s, i + 1 ) << 12 ) | ( _getbyte64( s, i + 2 ) << 6 );
      x.push( String.fromCharCode( b10 >> 16, ( b10 >> 8 ) & 0xff ) );
      break;

    case 2:
      b10 = ( _getbyte64( s, i ) << 18) | ( _getbyte64( s, i + 1 ) << 12 );
      x.push( String.fromCharCode( b10 >> 16 ) );
      break;
  }

  return x.join( "" );
}

var _getbyte = function ( s, i ) {
  var x = s.charCodeAt( i );

  if ( x > 255 ) {
    throw "INVALID_CHARACTER_ERR: DOM Exception 5";
  }

  return x;
}

var btoa = function ( s ) {
  if ( arguments.length !== 1 ) {
    throw "SyntaxError: exactly one argument required";
  }

  s = String( s );

  var i,
    b10,
    x = [],
    imax = s.length - s.length % 3;

  if ( s.length === 0 ) {
    return s;
  }

  for ( i = 0; i < imax; i += 3 ) {
    b10 = ( _getbyte( s, i ) << 16 ) | ( _getbyte( s, i + 1 ) << 8 ) | _getbyte( s, i + 2 );
    x.push( _ALPHA.charAt( b10 >> 18 ) );
    x.push( _ALPHA.charAt( ( b10 >> 12 ) & 0x3F ) );
    x.push( _ALPHA.charAt( ( b10 >> 6 ) & 0x3f ) );
    x.push( _ALPHA.charAt( b10 & 0x3f ) );
  }

  switch ( s.length - imax ) {
    case 1:
      b10 = _getbyte( s, i ) << 16;
      x.push( _ALPHA.charAt( b10 >> 18 ) + _ALPHA.charAt( ( b10 >> 12 ) & 0x3F ) + _PADCHAR + _PADCHAR );
      break;

    case 2:
      b10 = ( _getbyte( s, i ) << 16 ) | ( _getbyte( s, i + 1 ) << 8 );
      x.push( _ALPHA.charAt( b10 >> 18 ) + _ALPHA.charAt( ( b10 >> 12 ) & 0x3F ) + _ALPHA.charAt( ( b10 >> 6 ) & 0x3f ) + _PADCHAR );
      break;
  }

  return x.join( "" );
}
///////////////////////////// atob

try {
  var abiB64 = 'W3siY29uc3RhbnQiOnRydWUsImlucHV0cyI6W10sIm5hbWUiOiJnZXRDZXJ0aWZpY2F0ZSIsIm91dHB1dHMiOlt7Im5hbWUiOiJfdHlwZV9pZCIsInR5cGUiOiJ1aW50OCJ9LHsibmFtZSI6Il9kdF9jcmVhdGUiLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6Il9zdWJqZWN0c19jb3VudCIsInR5cGUiOiJ1aW50MjU2In1dLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6ZmFsc2UsImlucHV0cyI6W3sibmFtZSI6Il9pZCIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoiX3ZhbGlkYXRlX2hhc2giLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6Il9iaXJ0aGRheSIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoiX2dlbmRlciIsInR5cGUiOiJ1aW50OCJ9LHsibmFtZSI6Il9kdF9zaWduIiwidHlwZSI6InVpbnQyNTYifSx7Im5hbWUiOiJfZnVsbG5hbWUiLCJ0eXBlIjoic3RyaW5nIn1dLCJuYW1lIjoiU2lnbiIsIm91dHB1dHMiOltdLCJwYXlhYmxlIjp0cnVlLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImNvbnN0YW50Ijp0cnVlLCJpbnB1dHMiOlt7Im5hbWUiOiJpbmRleCIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoiZ2V0U3ViamVjdCIsIm91dHB1dHMiOlt7Im5hbWUiOiJfaWQiLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6Il92YWxpZGF0ZV9oYXNoIiwidHlwZSI6InVpbnQyNTYifSx7Im5hbWUiOiJfYmlydGhkYXkiLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6Il9mdWxsbmFtZSIsInR5cGUiOiJzdHJpbmcifSx7Im5hbWUiOiJfZ2VuZGVyIiwidHlwZSI6InVpbnQ4In0seyJuYW1lIjoiX2R0X3NpZ24iLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6Il9kdF9jYW5jZWwiLCJ0eXBlIjoidWludDI1NiJ9XSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJuYW1lIjoiX3R5cGVfaWQiLCJ0eXBlIjoidWludDgifSx7Im5hbWUiOiJfZHRfY3JlYXRlIiwidHlwZSI6InVpbnQyNTYifSx7Im5hbWUiOiJfc3ViamVjdHNfYWRkciIsInR5cGUiOiJhZGRyZXNzW10ifV0sInBheWFibGUiOmZhbHNlLCJ0eXBlIjoiY29uc3RydWN0b3IifV0=';
  var abi = atob(abiB64);
  var bin = '0x6060604052341561000f57600080fd5b60405161087a38038061087a83398101604052808051919060200180519190602001805190910190505b6000805460ff191660ff851617905560018290556002818051610060929160200190610085565b5060048054600160a060020a03191633600160a060020a03161790555b505050610118565b8280548282559060005260206000209081019282156100dc579160200282015b828111156100dc5782518254600160a060020a031916600160a060020a0391909116178255602092909201916001909101906100a5565b5b506100e99291506100ed565b5090565b61011591905b808211156100e9578054600160a060020a03191681556001016100f3565b5090565b90565b610753806101276000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663ae15eb8e8114610053578063c5e7da2314610090578063f6dd0187146100f1575b600080fd5b341561005e57600080fd5b6100666101b0565b604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390f35b6100ef600480359060248035916044359160ff60643516916084359160c49060a43590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506101c595505050505050565b005b34156100fc57600080fd5b610107600435610358565b60405180888152602001878152602001868152602001806020018560ff1660ff168152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561016f5780820151818401525b602001610156565b50505050905090810190601f16801561019c5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b60005460015460025460ff909216915b909192565b6000805b60025481101561022c5760028054829081106101e157fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a031633600160a060020a03161415610223576001915061022c565b5b6001016101c9565b600160a060020a033316600090815260036020526040902060050154151580610253575081155b1561025d57600080fd5b60e0604051908101604090815289825260208083018a90528183018990526060830186905260ff8816608084015260a08301879052600060c08401819052600160a060020a03331681526003909152208151815560208201518160010155604082015181600201556060820151816003019080516102df929160200190610675565b50608082015160048201805460ff191660ff9290921691909117905560a0820151816005015560c082015160069091015550341561034b57600454600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561034b57600080fd5b5b5b5b5050505050505050565b60008060006103656106f4565b60008060006003600060028a81548110151561037d57fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000206000015496506003600060028a8154811015156103d657fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000206001015495506003600060028a81548110151561042f57fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000206002015494506003600060028a81548110151561048857fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000206003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561055f5780601f106105345761010080835404028352916020019161055f565b820191906000526020600020905b81548152906001019060200180831161054257829003601f168201915b505050505093506003600060028a81548110151561057957fe5b906000526020600020900160005b9054600160a060020a036101009290920a900416815260208101919091526040016000908120600401546002805460ff9092169550600392918b9081106105ca57fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000206005015491506003600060028a81548110151561062357fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020019081526020016000206006015490505b919395979092949650565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106b657805160ff19168380011785556106e3565b828001600101855582156106e3579182015b828111156106e35782518255916020019190600101906106c8565b5b506106f0929150610706565b5090565b60206040519081016040526000815290565b61072491905b808211156106f0576000815560010161070c565b5090565b905600a165627a7a72305820166d12d9c1b3fbaf4d236ba4d9d094afe0d5b7b52eb627cbe80a3166e8d01c280029';
  var certificateProxy = web3.eth.contract(JSON.parse(abi));

  web3.personal.unlockAccount("0xcca75be6a20e2288a130511973027783adcc4e53", "");

  var subjAddresses = ["0xcca75be6a20e2288a130511973027783adcc4e53"];

  var contract = certificateProxy.new("0", new Date().getTime().toString(), subjAddresses, {from: "0xcca75be6a20e2288a130511973027783adcc4e53", gas: 2000000, data: bin});
//  throw JSON.stringify(contract);

  web3.personal.lockAccount("0xcca75be6a20e2288a130511973027783adcc4e53");
  console.log(contract.transactionHash); //*/
}
catch(e) {
  console.log("EXCEPTION:");
  console.log(e);
};
